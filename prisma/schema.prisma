generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_URL")
  directUrl = env("PRISMA_DIRECT")
}

model PlayerModel {
  id         Int         @id @unique @default(autoincrement())
  teamId     Int         @unique
  name       String
  lastname   String
  number     Int?
  height     Int?
  position   Int?
  age        Int?
  team       Team        @relation(fields: [teamId], references: [id])
  statistics Statistics?
  rosters    Roster[]

  @@index([id, lastname, teamId])
  @@map("players")
}

model Statistics {
  id            Int    @id @unique @default(autoincrement())
  playerId      Int    @unique
  matchId       Int
  minutes       Int    @default(0)
  points        Int?
  insideFga     Int?
  outsideFga    Int?
  freethrowsFga Int?
  insideFgm     Int?
  outsideFgm    Int?
  freethrowsFgm Int?
  assists       Int?
  reboundsSum   Int?
  reboundsOff   Int?
  reboundsDef   Int?
  blocks        Int?
  steals        Int?
  turnovers     Int?
  fouls         Int?
  match         Match  @relation(fields: [matchId], references: [id])
  player        Player @relation(fields: [playerId], references: [id])

  @@index([id, playerId, matchId])
  @@map("statistics")
}

model Team {
  id              Int      @id @unique @default(autoincrement())
  name            String
  won             Int      @default(0)
  lost            Int      @default(0)
  cityId          Int      @unique
  hostMatches     Match?   @relation("hostTeam")
  opponentMatches Match?   @relation("opponentTeam")
  players         Player[]
  city            City     @relation(fields: [cityId], references: [id])

  @@index([id, name])
  @@map("teams")
}

model Match {
  id         Int          @id @unique @default(autoincrement())
  hostId     Int          @unique
  opponentId Int          @unique
  host       Team         @relation("hostTeam", fields: [hostId], references: [id])
  opponent   Team         @relation("opponentTeam", fields: [opponentId], references: [id])
  schedule   Schedule?
  score      Score?
  statistics Statistics[]
  rosters    Roster[]
  backlogs   Backlog[]

  @@index([id, hostId, opponentId])
  @@map("matches")
}

model Roster {
  id       Int     @id @default(autoincrement())
  playerId Int
  matchId  Int
  player   Player  @relation(fields: [playerId], references: [id])
  match    Match   @relation(fields: [matchId], references: [id])

  @@index([id, playerId, matchId])
  @@map("rosters")
}

model Score {
  matchId  Int   @unique
  host     Int[]
  opponent Int[]
  match    Match @relation(fields: [matchId], references: [id])

  @@index([matchId])
  @@map("score")
}

model Backlog {
  match    Match @relation(fields: [matchId], references: [id])
  matchId  Int   @unique
  data     String
  datetime DateTime

  @@index([matchId])
  @@map("backlog")
}

model Schedule {
  matchId  Int      @unique
  datetime DateTime
  cityId   Int      @unique
  city     City     @relation(fields: [cityId], references: [id])
  match    Match    @relation(fields: [matchId], references: [id])

  @@index([matchId, cityId])
  @@map("schedules")
}

model City {
  id        Int       @id @unique @default(autoincrement())
  name      String
  state     String
  schedules Schedule?
  teams     Team?

  @@index([id, name])
  @@map("cities")
}